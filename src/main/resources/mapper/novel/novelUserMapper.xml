<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.book.novel.module.novel.NovelUserMapper">

    <resultMap id="novelDTO" type="com.book.novel.module.novel.dto.NovelDTO"/>

    <resultMap id="novelDetailDTO" type="com.book.novel.module.novel.dto.NovelDetailDTO"/>

    <sql id="all">
        n.id,
        n.category_id,
        n.title,
        n.author_id,
        n.pic,
        n.introduce,
        n.tag,
        n.up,
        n.down,
        n.hits,
        n.rating,
        n.rating_count,
        n.serialize,
        n.favorites,
        n.create_time,
        n.update_time,
        n.status,
        n.hits_day,
        n.hits_week,
        n.hits_month,
        n.word,
        n.recommend
    </sql>

    <sql id="novelDTOAll">
        n.id,
        n.title,
        u.username as author,
        n.pic,
        n.introduce,
        n.tag,
        n.hits,
        n.hits_day,
        n.hits_week,
        n.hits_month,
        floor(n.rating/n.rating_count) as rating,
        n.serialize,
        n.update_time,
        n.recommend,
        n.favorites
    </sql>

    <sql id="novelDetailDTOAll">
        n.up,
        n.down,
        n.word,
        <include refid="novelDTOAll"></include>
    </sql>
    
    <sql id="order">
        <choose>
            <when test="pageBO.orderKey=='update_time'">
                order by n.update_time desc
            </when>
            <when test="pageBO.orderKey=='hits'">
                order by n.hits desc
            </when>
            <when test="pageBO.orderKey=='rating'">
                order by n.rating desc
            </when>
            <when test="pageBO.orderKey=='hits_day'">
                order by n.hits_day desc
            </when>
            <when test="pageBO.orderKey=='hits_week'">
                order by n.hits_week desc
            </when>
            <when test="pageBO.orderKey=='hits_month'">
                order by n.hits_month desc
            </when>
            <when test="pageBO.orderKey=='favorites'">
                order by n.favorites desc
            </when>
            <when test="pageBO.orderKey=='recommend'">
                order by n.recommend desc
            </when>
        </choose>
    </sql>

    <insert id="saveUNFavorites">
        insert into
        user_novel_favorites(user_id, novel_id)
        values (#{userId},#{novelId})
    </insert>

    <delete id="removeUNFavorites">
        delete from
        user_novel_favorites
        where
        user_id=#{userId}
        and novel_id=#{novelId}
    </delete>
    
    <select id="listNovelByCategory" resultMap="novelDTO">
        select
        <include refid="novelDTOAll"></include>
        from
        novel n
        left join user u on u.id=n.author_id
        where
        n.category_id=#{categoryId}
        and n.status &lt; 2
        <include refid="order"></include>
        limit #{pageBO.start},#{pageBO.pageSize}
    </select>

    <select id="getNovelCountByKey" resultType="java.lang.Integer">
        select
        count(n.id)
        from
        novel n
        left join
        user u on u.id=n.author_id
        where
        n.title like concat('%', #{key}, '%')
        and n.status &lt; 2
        or u.username like concat('%', #{key}, '%')
    </select>

    <select id="listNovelByKey" resultMap="novelDTO">
        select
        <include refid="novelDTOAll"></include>
        from
        novel n
        left join
        user u on u.id=n.author_id
        where
        (
        n.title like concat('%', #{key}, '%')
        or u.username like concat('%', #{key}, '%')
        )
        and n.status &lt; 2
        <include refid="order"></include>
        limit #{pageBO.start},#{pageBO.pageSize}
    </select>

    <select id="getNovelDetailById" resultMap="novelDetailDTO">
        select
        <include refid="novelDetailDTOAll"></include>
        from
        novel n
        left join
        user u on u.id=n.author_id
        where
        n.id=#{novelId}
        and n.status &lt; 2
    </select>

    <select id="listRank" resultMap="novelDTO">
        select
        <include refid="novelDTOAll"></include>
        from
        novel n
        left join
        user u on u.id=n.author_id
        where n.status &lt; 2
        <choose>
            <when test="key=='rank_hits'">
                order by n.hits desc
            </when>
            <when test="key=='rank_hits_day'">
                order by n.hits_day desc
            </when>
            <when test="key=='rank_hits_week'">
                order by n.hits_week desc
            </when>
            <when test="key=='rank_hits_month'">
                order by n.hits_month desc
            </when>
            <when test="key=='rank_rating'">
                order by n.rating desc
            </when>
            <when test="key=='rank_favorites'">
                order by n.favorites desc
            </when>
            <when test="key=='rank_recommend'">
                order by n.recommend desc
            </when>
        </choose>
        limit #{num}
    </select>

    <select id="listFavoritesNovel" resultMap="novelDTO">
        select
        <include refid="novelDTOAll"></include>
        from
        novel n
        left join user u on n.author_id=u.id
        left join user_novel_favorites unf on n.id=unf.novel_id
        left join user u2 on u2.id=unf.user_id
        where
        u2.id=#{userId}
        and n.status &lt; 2
        order by unf.create_time desc
    </select>

    <select id="listAllNovel" resultMap="novelDTO">
        select
        <include refid="novelDTOAll"></include>
        from novel n
        left join user u on n.author_id=u.id
        where
        n.status &lt; 2
        <include refid="order"></include>
        limit #{pageBO.start},#{pageBO.pageSize}
    </select>
</mapper>