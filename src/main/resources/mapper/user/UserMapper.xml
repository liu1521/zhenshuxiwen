<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.book.novel.module.user.UserMapper">

    <resultMap id="loginDetailDTO" type="com.book.novel.module.login.dto.LoginDetailDTO"/>

    <sql id="all">
        u.id,
        u.username,
        u.email,
        u.password,
        u.sex,
        u.head_img_url,
        u.introduce,
        u.status,
        u.login_count,
        u.last_login_ip,
        u.last_login_time,
        u.exp,
        u.create_time,
        u.recommend,
        u.role_id
    </sql>

    <insert id="saveUser">
        insert into
        user(username,email,password,sex)
        values (#{username}, #{email}, #{password}, #{sex})
    </insert>

    <insert id="saveAddress">
        insert into
        address(
        <if test="addressDTO.isDefault != null">
            is_default,
        </if>
        address,
        introduce,
        receiver,
        phone,
        user_id)
        values(
        <if test="addressDTO.isDefault != null">
            #{addressDTO.isDefault},
        </if>
        #{addressDTO.address},
        #{addressDTO.introduce},
         #{addressDTO.receiver},
         #{addressDTO.phone},
         #{uid})
    </insert>

    <delete id="deleteAddress">
        delete from
        address
        where
        id = #{addressId}
        and
        is_default = 0
    </delete>

    <update id="updateDefault">
        update
        address
        set
        is_default = #{isDefault}
        where
        id = #{addressId}
    </update>

    <update id="updateAddress">
        update
        address
        <set>
            <if test="introduce != null">
                introduce = #{introduce},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
            <if test="receiver != null">
                receiver = #{receiver},
            </if>
            <if test="phone != null">
                phone = #{phone}
            </if>
        </set>
        where
        id = #{addressId}
    </update>

    <update id="updateRoleToAuthor">
        update
        user u
        set
        u.role_id=8888
        where
        u.id=#{userId}
    </update>

    <update id="updateRecommendAddOne">
        update
        user u
        set
        u.recommend=u.recommend+1
        where
        u.status&lt;2
        and u.login_count&gt;0
    </update>

    <update id="updateUserLoginInfo">
        update
        user u
        set
        u.login_count=#{loginCount},
        u.last_login_ip=#{lastLoginIp},
        u.last_login_time=now()
        where
        u.id=#{id}
    </update>

    <update id="updateStatusById">
        update
        user u
        set
        u.status=#{status}
        where
        u.id=#{userId}
    </update>

    <update id="updateUserInfo">
        update
        user u
        set
        u.username=#{username},
        u.sex=#{sex},
        u.head_img_url=#{headImgUrl},
        u.introduce=#{introduce}
        where
        u.id=#{id}
    </update>

    <update id="updateSubRecommend">
        update
        user u
        set
        u.recommend=u.recommend-1
        u.exp=u.exp+5
        where
        u.id=#{userId}
    </update>

    <select id="getLoginDetailDTO" resultMap="loginDetailDTO">
        select
        <include refid="all"></include>
        from
        user u
        left join role r on u.role_id=r.id
        where
        u.username=#{username}
    </select>

    <select id="getUserById" resultType="com.book.novel.module.user.entity.UserEntity">
        select
        <include refid="all"></include>
        from
        user u
        where u.id=#{id}
    </select>

    <select id="getUserByUsername" resultType="com.book.novel.module.user.entity.UserEntity">
        select
        <include refid="all"></include>
        from
        user u
        where
        u.username=#{username}
    </select>

    <select id="getUserByEmailAndPassword" resultType="com.book.novel.module.user.entity.UserEntity">
        select
        <include refid="all"></include>
        from
        user u
        where
        u.email=#{email}
        and u.password=#{password}
    </select>

    <select id="getIdByUsername" resultType="java.lang.Integer">
        select
        u.id
        from
        user u
        where
        u.username=#{username}
    </select>

    <select id="getIdByEmail" resultType="java.lang.Integer">
        select
        u.id
        from
        user u
        where
        u.email=#{email}
    </select>

    <select id="getUserByEmail" resultType="com.book.novel.module.user.entity.UserEntity">
        select
        <include refid="all"></include>
        from
        user u
        where
        u.email=#{email}
    </select>

    <select id="getEmailByUsername" resultType="java.lang.String">
        select
        u.email
        from
        user u
        where
        u.username=#{username}
    </select>

    <select id="getTicketsById" resultType="java.lang.Integer">
        select
        u.recommend
        from
        user u
        where
        u.id=#{userId}
    </select>

    <select id="listRegisterToAuthorUser" resultType="com.book.novel.module.user.entity.UserEntity">
        select
        <include refid="all"></include>
        from
        user u
        where
        u.status=1
    </select>

    <select id="countRegisterToAuthorUser">
        select
        count(u.id)
        from
        user u
        where
        u.status=1
    </select>

    <select id="listAddress" resultType="com.book.novel.module.user.dto.AddressDTO">
        select
        id as addressId,
        introduce,
        address,
        receiver,
        phone,
        is_default as isDefault
        from
        address
        where
        user_id = #{uid}
    </select>

</mapper>